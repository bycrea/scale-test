{% extends 'base.html.twig' %}

{% set title = 'Admin' %}

{% block body %}
    <main id="admin">
        {{ include('admin/_header.html.twig') }}

        <div class="container diagnostics">
            <div class="head">
                <h1 class="title">{{ question is defined ? "Question N°" ~ question.id : "Nouvelle question" }}</h1>
                <a href="{{ path('admin_diagnostic_edit', {diagnostic: diagnostic.id}) }}"><img class="icon" src="{{ asset('img/icon/return.png') }}" alt="return"></a>
            </div>

            <form action="{{ path('admin_question_edit', {diagnostic: diagnostic.id, category: category.id, question: question is defined ? question.id : null}) }}" method="post">
                <div class="create">

                    <label for="ask">Question<sup>*</sup></label>
                    <input type="text" id="ask" name="ask" value="{{ question is defined ? question.ask : '' }}" required>

                    <label for="helper">Aide</label>
                    <textarea id="helper" name="helper" rows="10">{{ question is defined ? question.helper : '' }}</textarea>

                    <label for="category"></label>
                    <select name="category" id="category">
                        {% if question is defined %}
                            {% for c in categories %}
                                <option value="{{ c.id }}" {{ question.category.id == c.id ? 'selected' : '' }}>{{ c.name }}</option>
                            {% endfor %}
                        {% else %}
                            {% for c in categories %}
                                <option value="{{ c.id }}" {{ category.id == c.id ? 'selected' : '' }}>{{ c.name }}</option>
                            {% endfor %}
                        {% endif %}
                    </select>

                    <label for="required">Réponse exigé&nbsp;&nbsp;&nbsp;
                        <input type="checkbox" id="required" name="required" value="true" {{ question is defined ? (question.required ? 'checked' : '') : 'checked' }}>
                    </label>

                    <label for="answerType">Typologie de réponse</label>
                    <select id="answerType" name="answerType">
                        <option value="">&nbsp;...</option>
                        {% for id, answerType in answerTypes %}
                            <option value="{{ id }}">{{ answerType.label }}</option>
                        {% endfor %}
                    </select>

                    <div id="answers">
                        {% if answerHTML is defined %}
                            {{ answerHTML|raw }}
                        {% endif %}

                        {# answer created here #}
                    </div>

                </div>

                <input type="submit" value="{{ question is defined ? "Modifier" : "Créer" }}">
            </form>
        </div>
    </main>
{% endblock %}

{% block javascripts %}
    <script>
        document.getElementById('answerType').addEventListener('change', (e) => {
            // TODO save answers

            fetch('{{ path('admin_anwser_create', {diagnostic: diagnostic.id}) }}/' + e.target.selectedOptions[0].value)
            .then((r) => r.text()).then(content => {
                document.getElementById('answers').innerHTML = content;
                // TODO re-inject answers
            });
        });
        document.getElementById('answerType').value = {{ question is defined ? question.answerType : '""' }};

        function removeMultipleAnswer(e) {
            e.preventDefault();
            if(e.target.classList.contains('disabled') || e.target.tagName !== 'IMG') return false;

            e.target.parentNode.parentNode.remove();
        }

        function addMultipleAnswer(e) {
            e.preventDefault();
            if(e.target.classList.contains('disabled') || e.target.tagName !== 'IMG') return false;

            let answer = e.target.parentNode.parentNode.parentNode;
            document.getElementById('answers').insertBefore(answer.cloneNode(true), answer.nextSibling)
        }

        function activateInputs(e) {
            let parent = e.target.parentNode.parentNode;

            if(parent.classList.contains('disabled')) {
                parent.classList.remove('disabled');
                parent.querySelectorAll('input:not([type="checkbox"]), select').forEach((i) => i.disabled = false);
            } else {
                parent.classList.add('disabled');
                parent.querySelectorAll('input:not([type="checkbox"]), select').forEach((i) => i.disabled = true);
            }
        }
    </script>
{% endblock %}
