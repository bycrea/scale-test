{% extends 'base.html.twig' %}

{% set title = 'Admin' %}

{% block body %}
    <main id="admin">
        {{ include('admin/_header.html.twig') }}

        <div class="container diagnostics">
            <div class="head">
                <h1 class="title"><span class="sn">Edition : </span><span contenteditable="true" data-name="name">{{ diagnostic.name }}</span></h1>
                <a href="{{ path('admin_diagnostics') }}"><img class="icon" src="{{ asset('img/icon/return.png') }}" alt="return"></a>

                <p class="infos" contenteditable="true" data-name="comment">{{ diagnostic.comment }}</p>
            </div>

            <form action="{{ path('admin_diagnostic_edit', {diagnostic: diagnostic.id}) }}" method="post">
                <input type="hidden" name="name" value="{{ diagnostic.name }}">
                <input type="hidden" name="comment" value="{{ diagnostic.comment }}">

                {% for key, category in categories %}
                    {% set MATURITY = constant('CATEGORY_MATURITY', diagnostic) %}
                    <div class="category {{ lastUpdate == category.id ? 'active' : '' }}" data-category-id="{{ category.id }}">
                        <div class="top">
                            <h2 class="name sn">{{ category.name }}</h2>
                            <label for="level-1">
                                &nbsp;{{ MATURITY[0] }}&nbsp;
                                <input id="level-1" type="number" step="1" min="0" max="100" name="{{ category.id }}-scales[]" value="{{ diagnostic.categoriesScales[category.id][0] ?? 0 }}">&nbsp;%
                            </label>
                            <label for="level-2">
                                &nbsp;{{ MATURITY[1] }}&nbsp;
                                <input id="level-2" type="number" step="1" min="0" max="100" name="{{ category.id }}-scales[]" value="{{ diagnostic.categoriesScales[category.id][1] ?? 0 }}">&nbsp;%
                            </label>
                            <label for="level-3">
                                &nbsp;{{ MATURITY[2] }}&nbsp;
                                <input id="level-3" type="number" step="1" min="0" max="100" name="{{ category.id }}-scales[]" value="{{ diagnostic.categoriesScales[category.id][2] ?? 100 }}">&nbsp;%
                            </label>
                        </div>

                        <div class="questions">
                            <table>
                                <tbody>
                                    {% for question in diagnostic.questions %}
                                        {% if question.category == category %}
                                            <tr class="question"
                                                data-id="{{ question.id }}" data-rang="{{ question.rang }}" data-category="{{ category.id }}"
                                                    title="{{ question.id in isQLinked ? 'QLinked' : (question.id in isQNexted ? 'QNexted' : '') }}"
                                            >
                                                <td class="x-small checkbox">
                                                    <input type="checkbox" name="toggle" autocomplete="off"
                                                       value="{{ question.id }}"
                                                        {{ question.activated or question.id in isQLinked or question.id in isQNexted ? 'checked' : "" }}
                                                           {{ question.id in isQLinked or question.id in isQNexted ? 'disabled' : '' }}
                                                    >
                                                </td>
                                                <td class="x-small">Q{{ question.id }}</td>
                                                <td class="small center">
                                                    <img class="icon move" src="{{ asset('img/icon/up-down.png') }}" alt="move">
                                                </td>
                                                <td><span title="{{ question.helper }}">{{ question.ask }}</span></td>
                                                <td>{{ constant('ANSWERTYPES', question)[question.answerType]['label'] }}</td>
                                                <td class="small">
                                                    Oblig.&nbsp;<input type="checkbox" disabled {{ question.required ? 'checked="true"' : "" }}>
                                                </td>
                                                <td class="small qlink {{ question.id in isQLinked ? 'isQLinked' : '' }}">
                                                    {% set QID   = question.id %}
                                                    {% set QLink = question.qlink %}
                                                    QLink&nbsp;<input type="text" readonly value="{{ QLink is not empty ? "Q" ~ QLink[0] ~ QLink[1] ~ "Q" ~ QID ~ "=" ~ (QLink[2] is not empty ? QLink[2] : "Q" ~ QID ) : "--" }}">
                                                </td>
                                                <td class="small qnext {{ question.id in isQNexted ? 'isQNexted' : '' }}">
                                                    {% set QNext = question.qnext %}
                                                    QNext&nbsp;<input type="text" readonly value="{{ QNext is not empty ? "Q" ~ QID ~ QNext[1] ~ QNext[2] ~ "=>Q" ~ QNext[0]: '--' }}">
                                                </td>
                                                <td class="x-small">Pond.&nbsp;</td>
                                                <td class="small factor">Catg.&nbsp;<input type="text" readonly value="{{ question.categoryFactor }}"></td>
                                                <td class="small factor">Global&nbsp;<input type="text" readonly value="{{ question.globalFactor }}"></td>
                                                <td class="small center">
                                                    <a href="{{ path('admin_question_edit', {diagnostic: diagnostic.id, category: category.id, question: question.id}) }}">
                                                        <img class="icon" src="{{ asset('img/icon/edit.png') }}" alt="edit">
                                                    </a>
                                                </td>
                                                <td class="small center">
                                                    <a href="{{ path('admin_question_delete', {question: question.id}) }}">
                                                        <img class="icon" src="{{ asset('img/icon/trash.png') }}" alt="trash">
                                                    </a>
                                                </td>
                                            </tr>
                                        {% endif %}
                                    {% endfor %}
                                </tbody>
                            </table>

                            <div class="question add">
                                <span>Ajouter une question&nbsp;</span><a href="{{ path('admin_question_new', {diagnostic: diagnostic.id, category: category.id}) }}"><img class="icon" src="{{ asset('img/icon/add.png') }}" alt="add"></a>
                            </div>
                        </div>
                    </div>
                {% endfor %}

                <div class="global">
                    {% set GLOBAL_MATURITY = constant('GLOBAL_DEFAULT_MATURITY', diagnostic) %}
                    <div class="top">
                        <h2 class="name">Global</h2><p class="infos">(label & pourcentage)</p>
                        <label for="level-1">
                            1.&nbsp;<input type="text" name="global-label[]" value="{{ diagnostic.globalScale[0]['label'] ?? GLOBAL_MATURITY[0] }}" required>&nbsp;
                            <input id="level-1" type="number" step="1" min="0" max="100" name="global-scales[]" value="{{ diagnostic.globalScale[0]['scale'] ?? 0 }}">&nbsp;%
                        </label>
                        <label for="level-2">
                            2.&nbsp;<input type="text" name="global-label[]" value="{{ diagnostic.globalScale[1]['label'] ?? GLOBAL_MATURITY[1] }}" required>&nbsp;
                            <input id="level-2" type="number" step="1" min="0" max="100" name="global-scales[]" value="{{ diagnostic.globalScale[1]['scale'] ?? 0 }}">&nbsp;%
                        </label>
                        <label for="level-3">
                            3.&nbsp;<input type="text" name="global-label[]" value="{{ diagnostic.globalScale[2]['label'] ?? GLOBAL_MATURITY[2] }}" required>&nbsp;
                            <input id="level-3" type="number" step="1" min="0" max="100" name="global-scales[]" value="{{ diagnostic.globalScale[2]['scale'] ?? 0 }}">&nbsp;%
                        </label>
                        <label for="level-4">
                            4.&nbsp;<input type="text" name="global-label[]" value="{{ diagnostic.globalScale[3]['label'] ?? GLOBAL_MATURITY[3] }}" required>&nbsp;
                            <input id="level-4" type="number" step="1" min="0" max="100" name="global-scales[]" value="{{ diagnostic.globalScale[3]['scale'] ?? 100 }}">&nbsp;%
                        </label>
                    </div>
                </div>

                <input type="submit" value="{{ diagnostic.id ? 'Sauvegarder' : 'CrÃ©er' }}">
            </form>
        </div>
    </main>
{% endblock %}

{% block javascripts %}
    <script>
        // NOTE change name && comment
        document.querySelectorAll('[data-name]').forEach(data => {
            data.addEventListener('keyup', () => {
                document.querySelector('form input[name="' + data.dataset.name + '"]').value = data.innerText;
            });
        });

        // NOTE toggle activated
        document.querySelectorAll('input[name="toggle"]').forEach(i => {
            i.addEventListener('change', (e) => {
               let id = i.parentNode.parentNode.dataset.id;
               fetch('/admin/question/toggle/' + id, {
                   method: "PATCH"
               })
                    .catch((e) => {
                        console.error(e);
                        alert('Une erreur s\'est produite, veuillez recommencer.');
                    });
            });
        });

        // NOTE handle drag&drop rang
        let dragged = null;
        let over = null;
        let isUp = null;
        document.querySelectorAll('.move').forEach(q => {
            q.addEventListener('dragstart', qDragStart);
            q.addEventListener('dragend', qDragEnd);
        });

        document.querySelectorAll('tr.question').forEach(q => {
            q.addEventListener('dragenter', qDragOver);
            q.addEventListener('dragleave', qDragLeave);
        });

        function qDragStart(e) {
            let q = e.target.closest('tr.question');
            q.classList.add('drag');

            dragged = q;
        }

        function qDragOver(e) {
            let q = e.target.closest('tr.question');
            q.classList.add('dragover');

            over = q;
            isUp = dragged.dataset.rang > over.dataset.rang;
        }

        function qDragLeave(e) {
            let q = e.target.closest('tr.question');
            q.classList.remove('dragover');
        }

        function qDragEnd(e) {
            let q = e.target.closest('tr.question');
            q.classList.remove('drag');
            q.classList.remove('dragover');

            if(over !== null) {
                const undoCat = document.querySelectorAll('tr.question[data-category="' + dragged.dataset.category + '"');
                isUp ? over.parentNode.insertBefore(dragged, over) : over.parentNode.insertBefore(dragged, over.nextSibling);

                let data = {order: {}};
                document.querySelectorAll('tr.question').forEach((e, k) => {
                    e.dataset.rang = (k+1).toString();
                    data.order[e.dataset.id] = e.dataset.rang;;
                });

                data['dragged'] = dragged.dataset.id;
                data['newCategory'] = over.dataset.category;

                fetch('/admin/question/move', {
                    method: "PATCH",
                    body: JSON.stringify(data)
                })
                    .then(r => r.json()).then(json => console.log(json))
                    .catch(e => {
                        console.error(e);
                        alert('Une erreur s\'est produite, veuillez recommencer.');
                        document.querySelector('.questions tbody').innerHTML = "";
                        undoCat.forEach(q => document.querySelector('.questions tbody').append(q));
                    });
            }

            dragged = null;
            over = null;
        }

        // NOTE toggle develop categories
        let alt = false;
        window.addEventListener('keydown', (e) => {if(e.key === "Alt") alt = true});
        window.addEventListener('keyup', (e) => {if(e.key === "Alt") alt = false});

        let categoriesTop = document.querySelectorAll('.category .top');
        categoriesTop.forEach(top => {
            top.addEventListener('click', (e) => {
                let parentClass = top.parentNode.classList;
                if(alt === true) {
                    let state = parentClass.contains('active') ? 'remove' : 'add';
                    categoriesTop.forEach(el => {
                        el.parentNode.classList[state]('active');
                    });
                    return;
                }

                if(e.target.tagName === 'INPUT') return false;
                if(typeof top.parentNode === "undefined" || !top.parentNode.classList.contains('category')) return false;

                if(parentClass.contains('active'))
                    parentClass.remove('active');
                else
                    parentClass.add('active');
            });
        });
    </script>
{% endblock %}
